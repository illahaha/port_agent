/*******************************************************************************
 * Class: InstrumentRSNConnection
 * Filename: instrument_rsn_connection.cxx
 * Author: Tapana Gupta
 * License: Apache 2.0
 *
 * Manages the socket connection between an RSN Instrument and the port agent.
 * This interface consists of a TCP listener on the data port and command port
 * setup in non-blocking mode.
 *
 * Usage:
 *
 * InstrumentRSNConnection connection;
 *
 * connection.setDataPort(4001);
 *
 * // Is the data port configured
 * connection.dataConfigured();
 *
 * // This is a noop for this method.  There is nothing to initialize
 * connection.initialize();
 *
 * // Always true for this connection type.
 * connection.dataInitialized();
 *
 * // Is the data port connected
 * connection.dataConnected();
 *
 * // Always false for this connection type
 * connection.commandConnected();
 *
 * // Get a pointer tcp data listener object
 * TCPCommListener *data = connection.dataConnectionObject();
 *    
 * // Always returns null for this connection type
 * TCPCommListener *command = connection.commandConnectionObject();
 *    
 ******************************************************************************/

#include "instrument_tcp_connection.h"
#include "instrument_rsn_connection.h"
#include "common/util.h"
#include "common/logger.h"
#include "common/exception.h"
#include "network/tcp_comm_listener.h"

using namespace std;
using namespace logger;
using namespace network;
using namespace port_agent;
    
/******************************************************************************
 *   PUBLIC METHODS
 ******************************************************************************/
/******************************************************************************
 * Method: Constructor
 * Description: Default constructor.  Is likely never called, but wanted to
 *              define it explicitly.
 ******************************************************************************/
InstrumentRSNConnection::InstrumentRSNConnection() : Connection() {
}

/******************************************************************************
 * Method: Copy Constructor
 * Description: Copy constructor ensuring we do a deep copy of the packet data.
 *
 * Parameters:
 *   copy - rhs object to copy
 ******************************************************************************/
InstrumentRSNConnection::InstrumentRSNConnection(const InstrumentRSNConnection& rhs) {
    copy(rhs);
}

/******************************************************************************
 * Method: Destructor
 * Description: free up our dynamically created packet data.
 ******************************************************************************/
InstrumentRSNConnection::~InstrumentRSNConnection() {
}

/******************************************************************************
 * Method: Assignment operator
 * Description: Deep copy
 *
 * Parameters:
 *   copy - rhs object to copy
 ******************************************************************************/
InstrumentRSNConnection & InstrumentRSNConnection::operator=(const InstrumentRSNConnection &rhs) {
    copy(rhs);
    return *this;
}

/******************************************************************************
 * Method: copy
 * Description: Copy data from one packet object into this one.  Ensuring we
 * deep copy when needed.
 *
 * Parameters:
 *   copy - rhs object to copy
 ******************************************************************************/
void InstrumentRSNConnection::copy(const InstrumentRSNConnection &copy) {
    m_oDataSocket = copy.m_oDataSocket;
}

/******************************************************************************
 * Method: initialize
 * Description: Initialize any uninitialized sockets if they are configured.
 ******************************************************************************/
void InstrumentRSNConnection::initialize() {
    if(!dataConfigured())
        LOG(DEBUG) << "Data port not configured. Not initializing";
	
    if(dataConfigured() && ! dataConnected()) {
	LOG(DEBUG) << "initialize data socket";
        initializeDataSocket();
    } 
}

//TODO: implement sendBreak()
/******************************************************************************
 * Method: sendBreak
 * Description: Send a break condition for the given duration.
 ******************************************************************************/
bool InstrumentRSNConnection::sendBreak(const uint32_t iDuration) {
    bool bReturnCode = true;

     if (!m_oDataSocket.sendBreak(iDuration)) {
        LOG(ERROR) << "Failed to send break.";
        bReturnCode = false;
    }

    return bReturnCode;
}

